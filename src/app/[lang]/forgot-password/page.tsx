'use client';

import React, { useState } from 'react';
import { useTranslation } from '@/hooks/useTranslation';
import Header from '@/components/Header/Header';
import Link from 'next/link';
import { API_ENDPOINTS } from '@/config/api';
import { VerificationCodeInput, Lang } from '@/components/common/VerificationCodeInput';

type Step = 'email' | 'code' | 'password' | 'success';

export default function ForgotPasswordPage({ params }: { params: Promise<{ lang: string }> }) {
  const { lang } = React.use(params);
  const { t } = useTranslation(lang as any);
  
  const [step, setStep] = useState<Step>('email');
  const [email, setEmail] = useState('');
  const [code, setCode] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [token, setToken] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleEmailSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const formData = new FormData();
      formData.append('email', email);

      const response = await fetch(API_ENDPOINTS.forgotPassword, {
        method: 'POST',
        body: formData,
      });

      const data = await response.json();

      if (response.ok) {
        console.log('üîê Verification code (for testing):', data.code);
        setStep('code');
      } else {
        setError(data.detail || '–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–¥—É');
      }
    } catch (err) {
      setError('–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    } finally {
      setLoading(false);
    }
  };

  const handleCodeVerification = async (verificationCode: string) => {
    try {
      const formData = new FormData();
      formData.append('email', email);
      formData.append('code', verificationCode);

      const response = await fetch(API_ENDPOINTS.verifyResetCode, {
        method: 'POST',
        body: formData,
      });

      const data = await response.json();

      if (response.ok) {
        setToken(data.token);
        setStep('password');
        
        if (typeof window !== 'undefined') {
          const notification = document.createElement('div');
          notification.className = 'fixed top-4 right-4 bg-green-500 text-white p-4 rounded-lg shadow-lg z-50';
          notification.textContent = '–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å.';
          document.body.appendChild(notification);
          setTimeout(() => {
            notification.remove();
          }, 3000);
        }
        
        return { success: true, message: '–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ' };
      } else {
        return { success: false, message: data.detail || '–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥' };
      }
    } catch (err) {
      return { success: false, message: '–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.' };
    }
  };
  
  const handleCodeResend = async () => {
    try {
      const formData = new FormData();
      formData.append('email', email);

      const response = await fetch(API_ENDPOINTS.forgotPassword, {
        method: 'POST',
        body: formData,
      });

      const data = await response.json();

      if (response.ok) {
        return { success: true, message: '–ö–æ–¥ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ –≤–∞—à email' };
      } else {
        return { success: false, message: data.detail || '–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–¥—É' };
      }
    } catch (err) {
      return { success: false, message: '–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.' };
    }
  };

  const handlePasswordSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    if (password.length < 8) {
      setError('–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 8 —Å–∏–º–≤–æ–ª—ñ–≤');
      setLoading(false);
      return;
    }

    if (password !== confirmPassword) {
      setError('–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å');
      setLoading(false);
      return;
    }

    try {
      const formData = new FormData();
      formData.append('token', token);
      formData.append('new_password', password);
      formData.append('email', email); // <-- –¥–æ–±–∞–≤–∏–ª–∏ email

      const response = await fetch(API_ENDPOINTS.resetPassword, {
        method: 'POST',
        body: formData,
      });

      const data = await response.json();

      if (response.ok) {
        setStep('success');
      } else {
        setError(data.detail || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–∞—Ä–æ–ª—è');
      }
    } catch (err) {
      setError('–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-white">
      <Header lang={lang as any} />
      
      <div className="flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 h-screen">
        <div className="max-w-md w-full space-y-8">
          <div className="flex justify-center mb-8">
            <div className="flex items-center space-x-4">
              <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                step === 'email' ? 'bg-red-600 text-white' : 
                step === 'code' || step === 'password' || step === 'success' ? 'bg-green-600 text-white' : 
                'bg-gray-300 text-gray-600'
              }`}>1</div>
              <div className="w-12 h-1 bg-gray-300">
                <div className={`h-1 bg-red-600 transition-all duration-300 ${
                  step === 'code' || step === 'password' || step === 'success' ? 'w-full' : 'w-0'
                }`}></div>
              </div>
              <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                step === 'code' ? 'bg-red-600 text-white' : 
                step === 'password' || step === 'success' ? 'bg-green-600 text-white' : 
                'bg-gray-300 text-gray-600'
              }`}>2</div>
              <div className="w-12 h-1 bg-gray-300">
                <div className={`h-1 bg-red-600 transition-all duration-300 ${
                  step === 'password' || step === 'success' ? 'w-full' : 'w-0'
                }`}></div>
              </div>
              <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                step === 'password' ? 'bg-red-600 text-white' : 
                step === 'success' ? 'bg-green-600 text-white' : 
                'bg-gray-300 text-gray-600'
              }`}>3</div>
            </div>
          </div>

          <div className="text-center">
            <h2 className="text-3xl font-extrabold text-gray-900 font-primary">
              {step === 'email' && '–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è'}
              {step === 'code' && '–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥'}
              {step === 'password' && '–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å'}
              {step === 'success' && '–ì–æ—Ç–æ–≤–æ!'}
            </h2>
            <p className="mt-2 text-sm text-gray-600 font-secondary">
              {step === 'email' && '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à email –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–¥—É'}
              {step === 'code' && '–ú–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ 6-–∑–Ω–∞—á–Ω–∏–π –∫–æ–¥ –Ω–∞ –≤–∞—à email'}
              {step === 'password' && '–°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–∞–¥—ñ–π–Ω–∏–π –ø–∞—Ä–æ–ª—å'}
              {step === 'success' && '–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!'}
            </p>
          </div>

          {step === 'email' && (
            <form className="mt-8 space-y-6" onSubmit={handleEmailSubmit}>
              <div>
                <label htmlFor="email" className="block text-sm font-medium text-gray-700 font-primary">
                  Email –∞–¥—Ä–µ—Å–∞
                </label>
                <input
                  id="email"
                  name="email"
                  type="email"
                  required
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="mt-1 block w-full px-3 py-3 border border-gray-300 rounded-xl shadow-sm focus:outline-none focus:ring-red-500 focus:border-red-500 font-primary"
                  placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à email"
                />
              </div>

              {error && (
                <div className="bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded-xl font-primary">
                  {error}
                </div>
              )}

              <button
                type="submit"
                disabled={loading}
                className="w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-xl text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 disabled:opacity-50 font-primary shadow-lg transition-colors duration-300"
              >
                {loading ? '–ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ–¥...' : '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–¥'}
              </button>
            </form>
          )}

          {step === 'code' && (
            <div className="space-y-6">
              <VerificationCodeInput
                lang={lang as Lang}
                email={email}
                onVerify={handleCodeVerification}
                onResend={handleCodeResend}
                title="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ–¥—É"
                instruction={`–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —è–∫–∏–π –±—É–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ ${email}:`}
                showEmail={false}
                autoFocus={true}
                className="shadow-none border border-gray-200"
              />

              <div className="text-center">
                <button
                  type="button"
                  onClick={() => setStep('email')}
                  className="text-red-600 hover:text-red-700 text-sm"
                >
                  ‚Üê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è email
                </button>
              </div>
            </div>
          )}

          {step === 'password' && (
            <form onSubmit={handlePasswordSubmit} className="space-y-6">
              <div>
                <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">
                  –ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å
                </label>
                <input
                  id="password"
                  name="password"
                  type="password"
                  required
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent"
                  placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å (–º—ñ–Ω. 8 —Å–∏–º–≤–æ–ª—ñ–≤)"
                />
              </div>

              <div>
                <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-2">
                  –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø–∞—Ä–æ–ª—å
                </label>
                <input
                  id="confirmPassword"
                  name="confirmPassword"
                  type="password"
                  required
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent"
                  placeholder="–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å"
                />
              </div>

              {error && (
                <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded text-center">
                  {error}
                </div>
              )}

              <button
                type="submit"
                disabled={loading || password.length < 8 || password !== confirmPassword}
                className="w-full bg-red-600 text-white py-3 px-4 rounded-lg hover:bg-red-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed font-medium"
              >
                {loading ? '–ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è...' : '–ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å'}
              </button>
              
              {password && (
                <div className="text-sm text-gray-600 space-y-1">
                  <div className={password.length >= 8 ? 'text-green-600' : 'text-red-600'}>
                    {password.length >= 8 ? '‚úì' : '‚úó'} –ú—ñ–Ω—ñ–º—É–º 8 —Å–∏–º–≤–æ–ª—ñ–≤
                  </div>
                  {confirmPassword && (
                    <div className={password === confirmPassword ? 'text-green-600' : 'text-red-600'}>
                      {password === confirmPassword ? '‚úì' : '‚úó'} –ü–∞—Ä–æ–ª—ñ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å
                    </div>
                  )}
                </div>
              )}
            </form>
          )}

          {step === 'success' && (
            <div className="text-center space-y-6">
              <div className="w-16 h-16 mx-auto bg-green-100 rounded-full flex items-center justify-center">
                ‚úÖ
              </div>
              <h3 className="text-xl font-semibold text-green-700">–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!</h3>
              <Link
                href="/login"
                className="inline-block bg-red-600 text-white py-2 px-4 rounded-lg hover:bg-red-700 transition-colors"
              >
                –£–≤—ñ–π—Ç–∏
              </Link>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
